// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// rustHello
SEXP rustHello();
RcppExport SEXP _Circus_rustHello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rustHello());
    return rcpp_result_gen;
END_RCPP
}
// correlationMatrix
Eigen::MatrixXd correlationMatrix(Eigen::SparseMatrix<double> atac, Eigen::SparseMatrix<double> rna);
RcppExport SEXP _Circus_correlationMatrix(SEXP atacSEXP, SEXP rnaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type atac(atacSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type rna(rnaSEXP);
    rcpp_result_gen = Rcpp::wrap(correlationMatrix(atac, rna));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Circus_rustHello", (DL_FUNC) &_Circus_rustHello, 0},
    {"_Circus_correlationMatrix", (DL_FUNC) &_Circus_correlationMatrix, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Circus(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
